# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'

dotenv:
  - /etc/environment

vars:
  BASEDIR: /tmp/nuvops
  HOSTNAME:
    sh: hostname

tasks:

  prereq:
    silent: true
    cmds:
    - test "{{OS}}" == "linux" || die "sorry this is only for linux for now"
    - test  $(echo "{{.HOSTNAME}}" | awk -F- '{print NF}') == "4" || die "hostname should be in format <type>-<group>-<node>-<cloud>"
    - test -n "$NUV_REMOTE_NTFY_TOPIC_IN" || die "configure NUV_REMOTE_NTFY_TOPIC_IN"
    - test -n "$NUV_REMOTE_NTFY_TOPIC_OUT" || die "configure NUV_REMOTE_NTFY_TOPIC_OUT"
    - test -n "$NUV_REMOTE_NTFY_TOKEN" || die "configure NUV_REMOTE_NTFY_TOKEN"

  install:
    desc: 'install the nuv-remote service, use CLOUD=<your-cloud> TOKEN=<ntfy-token> IN=<topic-in> OUT=<topic-out>'
    cmds:
    - test -n "{{.CLOUD}}" || die "specify CLOUD=<cloud>"
    - test -n "{{.TOKEN}}" || die "specify TOKEN=<ntfy-token>"
    - test -n "{{.IN}}" || die "specify IN=<ntfy-topic-in>"
    - test -n "{{.OUT}}" || die "specify OUT=<ntfy-topic-out>"
    - | 
      export CLOUD="{{.CLOUD}}" TOKEN="{{.TOKEN}}" IN="{{.IN}}" OUT="{{.OUT}}"
      envsubst <nuv-remote.service | sudo tee /etc/systemd/system/nuv-remote.service
    - sudo systemctl daemon-reload
    - sudo systemctl enable nuv-remote
    - sudo systemctl restart nuv-remote

  uninstall:
    desc: 'uninstall the nuv-remote service'
    cmds:
    - sudo systemctl stop nuv-remote
    - sudo /bin/rm -f /etc/systemd/system/nuv-remote.service
    - sudo /bin/rm -Rf "{{.BASEDIR}}"
    - sudo systemctl daemon-reload

  run:
    silent: true
    desc: run remote server
    cmds:
    - task: prereq
    - |
      mkdir -p "{{.BASEDIR}}/{{.HOSTNAME}}"
      cd "{{.BASEDIR}}/{{.HOSTNAME}}"
      echo '*** {{.HOSTNAME}} ***' 
    - |
      export NTFY_TAGS="JOIN"
      export NTFY_TOKEN="$NUV_REMOTE_NTFY_TOKEN"
      export NTFY_TOPIC="$NUV_REMOTE_NTFY_TOPIC_OUT"
      export NTFY_TITLE="{{.HOSTNAME}}"
      export NTFY_PRIORITY=3
      export NTFY_MESSAGE="joining at $(datefmt -f TimeOnly)"
      ntfy publish -F | jq -r .message
    - ntfy sub
      --token "$NUV_REMOTE_NTFY_TOKEN"
      "$NUV_REMOTE_NTFY_TOPIC_IN" 
      "nuv remote server on_message"

  on_message:
    desc: react on messages using the first tag
    silent: true
    cmds:
    #- echo "$NTFY_RAW" | jq .
    - echo "--- on_{{.TAG}} ---"
    - task: on_{{.TAG}}
    vars:
      TAG:
        sh: echo "$NTFY_TAGS"

  on_upload:
    desc: handle upload
    dir: "{{.BASEDIR}}/{{.HOSTNAME}}"
    silent: true
    cmds:
    - |
      echo "upload: $(pwd)"
      URL="$(echo "$NTFY_RAW" | jq -r .attachment.url)"
      echo 'UPLOAD' >_tag
      if curl -sL "$URL" -o _nuvops.tgz 2>_stderr
      then 
        if /usr/bin/tar xzvf _nuvops.tgz 2>_stderr #>_stdout 
        then md5sum _nuvops.tgz >_out
             echo "*** upload: $(cat _out)"
        else cat _stderr >_out
        fi
      else cat _stderr >_out
      fi
    - |
      export NTFY_TAGS="UPLOAD"
      export NTFY_TOKEN="$NUV_REMOTE_NTFY_TOKEN"
      export NTFY_TOPIC="$NUV_REMOTE_NTFY_TOPIC_OUT"
      export NTFY_TITLE="{{.HOSTNAME}}"
      export NTFY_PRIORITY=3
      export NTFY_MESSAGE="$(cat _out)"
      ntfy publish -F | jq -r .id

  on_command:
    silent: true
    desc: execute commands
    env:
      NUV_ROOT_PLUGIN: '{{.BASEDIR}}/{{.HOSTNAME}}'
      TIMEID: 
        sh: TZ=GMT datefmt -t "$NTFY_TIME" -f TimeOnly
    vars:
      PREFIX: 
        sh: random --str 8
      PATH: "{{.BASEDIR}}/{{.HOSTNAME}}/{{.PREFIX}}"
    cmds:
    #- env | grep NTFY_
    #- echo python3 exec.py "{{.BASEDIR}}/{{.HOSTNAME}}" "{{.PREFIX}}" "$TIMEID"
    - python3 exec.py "{{.BASEDIR}}/{{.HOSTNAME}}" "{{.PREFIX}}" "$TIMEID"
    #- ls -l "{{.PATH}}"_*
    - |  
      export NTFY_TOKEN="$NUV_REMOTE_NTFY_TOKEN"
      export NTFY_TOPIC="$NUV_REMOTE_NTFY_TOPIC_OUT"
      export NTFY_TITLE="$TIMEID +-[{{.HOSTNAME}}] $(cat {{.PATH}}_title)"
      export NTFY_TAGS="LOG"      
      export NTFY_PRIORITY=3
      if test -e "{{.PATH}}_file"
      then 
          export NTFY_MESSAGE=""
          ntfy publish -F --file "{{.PATH}}_file" | jq .
      else
          export NTFY_MESSAGE="$(cat {{.PATH}}_message)"
          ntfy publish -F | jq .
      fi
    - rm "{{.PATH}}"_*
    status:
      - "! [[ {{.HOSTNAME}} ==  $NTFY_TITLE ]]"

