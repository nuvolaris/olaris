# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'

vars:
  FL: ""

tasks:

  setup:
    silent: true
    desc: setup nuvolaris.dev ide
    cmds:
    - |
      clear
      while ! test -e ~/.wskprops
      do nuv ide login
      done
    - |
      echo "**************************************************************************************"
      echo "*** Available Commands on Terminal:"
      echo "*** 'deploy' (alias for 'nuv ide deploy') to deploy your app to https://$NUVDEV_USERNAME.nuvolaris.dev"
      echo "*** 'devel'  (alias for 'nuv ide devel') to start incremental development mode"
      echo "*** 'login'  (alias for 'nuv ide login')  to login as a different user"
      echo "*** 'nuv ide' for more informations"
      echo "*** https://nuvolaris.github.io for online documentation"
      echo "**************************************************************************************"

  login:
    silent: true
    desc: login in nuvolaris.dev with Azure OpenAI access
    cmds:
    - |
      if test -n "{{._apihost_}}"
      then NUVDEV_APIHOST="{{._apihost_}}"
      else NUVDEV_APIHOST="https://nuvolaris.dev"
      fi
      echo "*** Configuring Access to $NUVOLARIS_ with Azure OpenAI ***"
      if test -z "{{._username_}}"
      then  echo -n "Enter Username: "
            read NUVDEV_USERNAME
      else NUVDEV_USERNAME="{{._username_}}"
      fi
      echo apihost=$NUVDEV_APIHOST username=$NUVDEV_USERNAME
      if nuv -login "$NUVDEV_APIHOST" "$NUVDEV_USERNAME"
      then 
        config NUVDEV_APIHOST="$NUVDEV_APIHOST"
        config NUVDEV_USERNAME="$NUVDEV_USERNAME"
        config NUVDEV_HOST="https://$NUVDEV_USERNAME.nuvolaris.dev"
        source ~/.wskprops
        config OPENAI_API_HOST=https://openai.nuvolaris.io
        config OPENAI_API_KEY="$(echo "$AUTH" | awk -F: '{print $1 }')"
        config OLLAMA_API_HOST=https://ollama.nuvolaris.io
        config OLLAMA_API_KEY="$(echo "$AUTH" | awk -F: '{print $1 }')"
      else 
        false
      fi

  serve:
    silent: true
    desc: local web server
    ignore_error: true
    cmds:
     - >
       http-server 
       -a 127.0.0.1 "$NUV_PWD/web" 
       -c-1 --mimetypes mime.types 
       -P $NUVDEV_HOST

  poll:
    silent: true
    desc: poll activation logs
    cmds:
    - nuv activation poll

  info:
    silent: true
    #desc: info
    cmds:
    - config -d | grep OPENAI_
    - config -d | grep NUVDEV_

  prereq:
    silent: true
    cmds:
      - >
        test "$(($NUVDEV_VERSION +0))" -gt 2404130000 
        || die "Your .devcontainer.json is outdated - update it from here: https://raw.githubusercontent.com/mastrogpt/starter/main/.devcontainer.json"
      - test -e "/.nuvolaris" || test -n "$NUVDEV_FORCE" || die "This command must be run in a Nuvolaris DevContainer"
      - test "$(python3 -V | awk -F. '{print $2}')" -ge 10 || die "python 3.10 or greater not available"
      - test "$(node -v | awk -F. '{print substr($1,2) }')" -ge 18 || die "nodejs 18 or greater not available"
      - test -d "$NUV_PWD/packages" || die "no packages in current directory"
      - test -e ~/.wskprops || die "please run 'nuv ide login' first"
      - test -n "$NUVDEV_HOST" || die "please run 'nuv ide login' first"
      - |
        if test -e "$NUV_PWD/package.json"
        then if ! test -d "$NUV_PWD/node_modules"
             then cd $NUV_PWD ; npm install
             fi
        fi
      - |
        if ! python3 -m pip list | grep watchfiles >/dev/null 2>/dev/null
        then
            PIP_FLAG="--user"
            if which python3 | grep $HOME >/dev/null
            then PIP_FLAG=""
            fi
            python3 -m pip install $PIP_FLAG watchfiles asyncio
        fi
      - |
        if ! which http-server >/dev/null 2>/dev/null
        then npm install -g http-server
        fi
      - task: kill

  kill:
    silent: true
    ignore_errors: true
    cmds:
      - |
        if test -e ~/.nuv/tmp/deploy.pgrp
        then
          PGRP="$(cat ~/.nuv/tmp/deploy.pgrp)"
          #pstree $PID
          LOOP=true
          while $LOOP
          do
            LOOP=false
            ps -a -o pgid,pid,stat | grep -v 'Z' | while read GRP PID STAT
            do 
              echo Terminating $PID in $GRP
              if test "$GRP" = "$PGRP"
              then #echo $GRP $PID
                   kill -9 "$PID" 
                   LOOP=true
              fi 
            done
            sleep 2
          done
          rm ~/.nuv/tmp/deploy.pgrp
        fi

  deploy:
    silent: true
    interactive: true
    desc: deploy a project or a single action (with _action_=<dir-or-file>)
    cmds:
      - task: prereq
      - |
        set -a
        if test -e $NUV_PWD/.env
        then source $NUV_PWD/.env
        fi
        if test -e $NUV_PWD/packages/.env
        then source $NUV_PWD/packages/.env
        fi
        if {{.__dry_run}}
        then DRY="--dry-run" ; ECHO='echo'
        else DRY="" ; ECHO=""
        fi
        if test -z "{{._action_}}"
        then 
            python3 -m deploy "$NUV_PWD" -d $DRY
            $ECHO nuv web upload web
            echo "URL: $NUVDEV_HOST"
        else 
            python3 -m deploy "$NUV_PWD" -s "{{._action_}}" $DRY
        fi

  devel:
    interactive: true
    silent: true
    desc: start interactive development mode files
    cmds:
      - task: prereq
      - |
        set -a
        if test -e $NUV_PWD/.env
        then source $NUV_PWD/.env
        fi
        if test -e $NUV_PWD/packages/.env
        then source $NUV_PWD/packages/.env
        fi
        if {{.__dry_run}}
        then DRY="--dry-run" ; ECHO='echo'
        else DRY="" ; ECHO=""
        fi
        if cat /proc/version | grep -i microsoft
        then export WATCHFILES_FORCE_POLLING=1
        fi
        python3 -m deploy "$NUV_PWD" -w $DRY
        #npm-run-all --parallel deploy serve
        true

  undeploy:
    desc: undeploy all the actions
    prompt: "are you sure you want to remove all actions and packages?"
    silent: true
    cmds:
    - task: prereq
    - >
      nuv action list
      | awk  'NR>1 { print $1}' 
      | while read action ;
      do  if {{.__dry_run}}
          then echo '$' nuv action delete "$action"
          else nuv action delete "$action"
          fi
      done
    - >
      nuv package list
      | awk  'NR>1 { print $1}'
      | while read package ;
      do if {{.__dry_run}}
         then echo '$' nuv package delete "$package" 
         else nuv package delete "$package" 
         fi
      done

  clean:
    silent: true
    cmds:
     - test -e "/.nuvolaris" || die "nuv ide commands must be run in the ghrc.io/nuvolaris/devcontainer with VSCode"
     - task: kill
     - |
       if test -d "$NUV_PWD/packages" 
       then 
          echo "*** removing virtualenv"
          /bin/rm -rvf "$NUV_PWD"/packages/*/*/virtualenv/
          echo "*** removing node_modules"
          /bin/rm -rvf "$NUV_PWD"/packages/*/*/node_modules/
          echo "*** removing vendor"
          /bin/rm -rvf "$NUV_PWD"/packages/*/*/vendor/
          echo "*** removing .zip"
          /bin/rm -vf "$NUV_PWD"/packages/*/*.zip 
       else die "no packages in current directory"
       fi

  shell:
    desc: open a bash shell with the current environment
    interactive: true
    dir: $NUV_PWD
    cmds:
    - bash 

  python:
    desc: python subcommand

  nodejs:
    desc: nodejs subcommand
  
  php:
    desc: php subcommand

  golang:
    desc: go subcommand